@page "/"
@using DMARadar
@using static DMARadar.Program
@rendermode InteractiveServer

<PageTitle>DMA</PageTitle>

<h1>DMA</h1>

@if (appState == ApplicationState.NotInitialized)
{
        <button @onclick="PrimaryAction">@DMAButtonLabel</button>
}
else
{
        <button @onclick="RunTestsAsync" disabled="@IsTesting">@TESTButtonLabel</button>
        <button @onclick="DisposeDMA">Shut down DMA</button>   
}

@foreach (var message in operationMessages)
{
        <div class="@($"message-{message.Type.ToString().ToLower()}")">@message.Content</div>
}

@code {
    private uint explorerPID = 0;
    private List<OperationMessage> operationMessages = new List<OperationMessage>();

    private ApplicationState appState = ApplicationState.NotInitialized;
    private bool IsTesting => appState == ApplicationState.RunningTests;

    private string DMAButtonLabel => "Initialize DMA";
    private string TESTButtonLabel => appState == ApplicationState.RunningTests ? "Testing..." : "Run Tests";

    protected override void OnInitialized()
    {
        appState = Memory.IsInitialized ? ApplicationState.Initialized : ApplicationState.NotInitialized;
        StateHasChanged();
    }
    private void InitializeDMA()
    {
        appState = ApplicationState.Initializing;
        operationMessages.Add(new OperationMessage("[i] DMA Initialization", MessageType.Success));

        Task.Delay(1000).ContinueWith(t =>
        {
            Memory.Init();
            appState = ApplicationState.Initialized;
            operationMessages.Add(new OperationMessage("[OK] DMA Initialized", MessageType.Success));
            InvokeAsync(StateHasChanged); // Ensure UI thread updates the state
        });
    }

    private async Task RunTestsAsync()
    {
        if (appState != ApplicationState.Initialized && appState != ApplicationState.TestsCompleted) return;

        appState = ApplicationState.RunningTests;
        operationMessages.Add(new OperationMessage("[i] Running Tests...", MessageType.Info));
        StateHasChanged();

        // Simulate running tests
        await Task.Delay(1000); // Placeholder for actual test logic

        operationMessages.Add(new OperationMessage("[OK] Speed Test", MessageType.Success));
        operationMessages.Add(new OperationMessage("[OK] Throughput Test", MessageType.Success));

        appState = ApplicationState.TestsCompleted;
        StateHasChanged();
    }

    private void DisposeDMA()
    {
        Memory.Dispose();
        appState = ApplicationState.NotInitialized;
        explorerPID = 0;
        operationMessages.Clear();
        StateHasChanged();
    }

    private void PrimaryAction()
    {
        if (Memory.IsInitialized)
        {
            appState = ApplicationState.Initialized;
        }
        if (appState == ApplicationState.NotInitialized)
        {
            InitializeDMA();
        }
        StateHasChanged();
    }
}
